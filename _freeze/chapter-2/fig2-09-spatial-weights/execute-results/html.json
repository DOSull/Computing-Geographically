{
  "hash": "9c371d6c585af5f4845d56c571cddd29",
  "result": {
    "markdown": "---\ntitle: \"Figure 2.9: A range of spatial weights applied to polygon data\"\nexecute: \n  cache: true\n  freeze: auto\n---\n\n\nThis figure is intended to demonstrate the diversity of possible conceptualisations of 'neighbour' that are often deployed in spatial analysis contexts, and represent possible different approaches to relative space. \n\n\n::: {.cell hash='fig2-09-spatial-weights_cache/html/unnamed-chunk-1_a7126242f93cbb3ddb36ed9b73af8f2d'}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\nlibrary(spdep)\nlibrary(sp)\n```\n:::\n\n\nFirst read a polygons dataset. You'll need to supply your own for this.\n\n\n::: {.cell hash='fig2-09-spatial-weights_cache/html/unnamed-chunk-2_33e30621620e278333940b5bbfca57d4'}\n\n```{.r .cell-code}\nchch <- st_read(\"chch-sa2.gpkg\") # you need a spatial dataset\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nReading layer `chch-sa2' from data source \n  `/Users/osullid3/Documents/code/computing-geographically/chapter-2/chch-sa2.gpkg' \n  using driver `GPKG'\nSimple feature collection with 161 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 1550986 ymin: 5169304 xmax: 1584508 ymax: 5195841\nProjected CRS: NZGD2000 / New Zealand Transverse Mercator 2000\n```\n:::\n:::\n\n\nThe `spdep` package I am using here requires the data in the `sp` package format, so convert to that.\n\n\n::: {.cell hash='fig2-09-spatial-weights_cache/html/unnamed-chunk-3_c0256c9d30b2373c3568beb36816ec0a'}\n\n```{.r .cell-code}\npolys <- chch %>%\n  select(geom) %>%\n  as(\"Spatial\")\n```\n:::\n\n\nNow make some points inside the polygons, and also some centroids.\n\n\n::: {.cell hash='fig2-09-spatial-weights_cache/html/unnamed-chunk-4_f703a3fc2cbe01eba7c91e9148735088'}\n\n```{.r .cell-code}\npts <- chch %>%\n  st_point_on_surface() %>%\n  st_geometry()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: st_point_on_surface assumes attributes are constant over geometries\n```\n:::\n\n```{.r .cell-code}\npts_c <- chch %>%\n  st_centroid() %>%\n  st_geometry()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning: st_centroid assumes attributes are constant over geometries\n```\n:::\n:::\n\n\nThese are presented in a single figure in the book in four rows of three, Here I show them all individually for greater clarity. But include the following plot setup code if you want to present them as in the book.\n\n\n::: {.cell hash='fig2-09-spatial-weights_cache/html/eval-FALSE_3207f76919290de3391218359010514c'}\n\n```{.r .cell-code}\npar(mfrow = c(4, 3), mai = rep(0, 4))\n```\n:::\n\n\nAnd now work through a series of possible weights options.\n\n## Contiguity based\n\n\n::: {.cell hash='fig2-09-spatial-weights_cache/html/unnamed-chunk-5_35f9cf7b8d44aed687494afdd9e2894e'}\n\n```{.r .cell-code}\nnb <- polys %>% poly2nb(queen = TRUE)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"Queen's rule adjacency\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnb <- polys %>% poly2nb(queen = FALSE)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"Rook's rule adjacency\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-5-2.png){width=672}\n:::\n\n```{.r .cell-code}\nnb <- nb %>% nblag(2) %>% nblag_cumul()\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"Cumulative lag-2 adjacency\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-5-3.png){width=672}\n:::\n:::\n\n\n## _k_-nearest neighbours\nNote that we use the centroids to calculate the distances, but the points inside the polygons from `st_point_on_surface()` for the plotting.\n\n\n::: {.cell hash='fig2-09-spatial-weights_cache/html/unnamed-chunk-6_4a07f9d67a218ddde918ffa70694298f'}\n\n```{.r .cell-code}\nnb <- pts_c %>% knearneigh(k = 3) %>% knn2nb()\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"k = 3\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnb <- pts_c %>% knearneigh(k = 6) %>% knn2nb()\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"k = 6\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code}\nnb <- pts_c %>% knearneigh(k = 12) %>% knn2nb()\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"k = 12\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n:::\n\n\n## Distance criteria\nNext, distance criteria, again calculated from centroids, but visualised using the `st_point_on_surface()`.\n\n\n::: {.cell hash='fig2-09-spatial-weights_cache/html/unnamed-chunk-7_d4279469a525cc3923cd44ec1c94f5e9'}\n\n```{.r .cell-code}\nnb <- pts_c %>% dnearneigh(d1 = 0, d2 = 1000)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"Distance < 1000\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-7-1.png){width=672}\n:::\n\n```{.r .cell-code}\nnb <- pts_c %>% dnearneigh(d1 = 0, d2 = 1500)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"Distance < 1500\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-7-2.png){width=672}\n:::\n\n```{.r .cell-code}\nnb <- pts_c %>% dnearneigh(d1 = 1500, d2 = 2000)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"1500 < Distance < 2000\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-7-3.png){width=672}\n:::\n:::\n\n\n## Graph-based approaches\nFinally, some network-based possibilities, [Delaunay triangulation](https://en.wikipedia.org/wiki/Delaunay_triangulation), [Gabriel graph](https://en.wikipedia.org/wiki/Gabriel_graph) and the [relative neighbour graph](https://en.wikipedia.org/wiki/Relative_neighborhood_graph).\n\n\n::: {.cell hash='fig2-09-spatial-weights_cache/html/unnamed-chunk-8_4824b2f308cbd77c992c2eb62a1523a6'}\n\n```{.r .cell-code}\ng <- tri2nb(pts_c)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"Delaunay triangulation\")\nplot(g, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n\n```{.r .cell-code}\ng <- gabrielneigh(pts_c)\nnb <- graph2nb(g)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"Gabriel graph\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-8-2.png){width=672}\n:::\n\n```{.r .cell-code}\ng <- relativeneigh(pts_c)\nnb <- graph2nb(g)\nplot(polys, col = \"lightgrey\", lwd = 0.5, border = 'white', main = \"Relative neighbour graph\")\nplot(nb, pts, col = 'red', lwd = 0.5, add = TRUE)\n```\n\n::: {.cell-output-display}\n![](fig2-09-spatial-weights_files/figure-html/unnamed-chunk-8-3.png){width=672}\n:::\n:::\n\n::: {.cell hash='fig2-09-spatial-weights_cache/html/unnamed-chunk-9_a423fc155014897bde9aae0149076057'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}