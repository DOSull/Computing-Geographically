{
  "hash": "6d4b925a83b59c962db34c51cd17663b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Figure 6.12 A simple graph drawn nine different ways\"\nlightbox: true\ncategories: \n  - figures\n  - code\n  - R\nexecute: \n  cache: true\n  freeze: auto\nknitr:\n  opts_chunk: \n    warning: false\n    message: false\n---\n\n\nThe main difference here is that the output is in colour, which might make it easier to see what's going on.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(igraph)\nlibrary(dplyr)\nlibrary(RColorBrewer)\nlibrary(ggplot2)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nplot_graph <- function(G, main = \"\", layout = layout.grid(G), \n                       vertex.color = \"black\") {\n  plot(G, main = main,\n       layout = layout, \n       vertex.label = NA, vertex.color = vertex.color, vertex.size = 5, \n       vertex.shape = \"circle\", vertex.frame.width = 0, \n       edge.color = \"black\", edge.width = 0.5)\n}\n```\n:::\n\n::: {.cell output.width='8' output.height='7'}\n\n```{.r .cell-code}\nthe_graph <- make_lattice(length = 20, dim = 2, nei = 1)\nthe_graph <- rewire(the_graph, each_edge(1/400))\nvertex_attr(the_graph, 'centrality') <- centralization.closeness(the_graph)$res\n\n# make a bespoke colour for each vertex based on centrality\nbase_pal <- brewer.pal(11, 'RdYlBu')\npal = colorRampPalette(base_pal)\ngraphCol = pal(500)[as.numeric(cut(V(the_graph)$centrality, breaks = 500))]\n\npar(mar = rep(1, 4))\nlayout(matrix(1:9, 3, 3, byrow = TRUE))\n\nplot_graph(the_graph, layout = layout_randomly(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout.circle(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout_with_mds(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout_as_tree(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, vertex.color = graphCol)\nplot_graph(the_graph, layout = layout_as_tree(the_graph, circular = TRUE), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout.kamada.kawai(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout.drl(the_graph), vertex.color = graphCol)\nplot_graph(the_graph, layout = layout.fruchterman.reingold(the_graph), vertex.color = graphCol)\n```\n\n::: {.cell-output-display}\n![](fig6-12-graph-drawings_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}