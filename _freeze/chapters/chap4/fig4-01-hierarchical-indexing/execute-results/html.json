{
  "hash": "dcfb9e8d15e94f739bcef1abeed21b84",
  "result": {
    "markdown": "---\ntitle: \"Figure 4.1: Geohashes and hierarchical indexing\"\ncategories: \n  - figures\n  - code\n  - R\nexecute: \n  cache: true\n  freeze: auto\nknitr:\n  opts_chunk: \n    warning: false\n    message: false\n---\n\n\nI made this figure by hand in Inkscape, which was _kind of_ fun, if a little tedious, given all the repetition involved. Here I show what I could have done instead in _R_.\n\n\n::: {.cell hash='fig4-01-hierarchical-indexing_cache/html/unnamed-chunk-1_e3632ff87d814df0036ffa2c554d56b3'}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\n```\n:::\n\n\n## The Z-order (Morton) and Hilbert curves\nThe first two are general indexing schemes with deep mathematical roots, so unsurprisingly there are _R_ packages for working with them. The [`morton` package](https://github.com/s-u/morton) is only available on github so you will need `devtools` to install it, while [`hilbert`](https://cloud.r-project.org/web/packages/hilbert/index.html) is on CRAN. Because I can, I've made these bigger than the labouriously hand-crafted examples in the book.\n\n\n::: {.cell hash='fig4-01-hierarchical-indexing_cache/html/unnamed-chunk-2_169042b051090ba342734d7aed786124'}\n\n```{.r .cell-code}\nlibrary(morton)\nlibrary(hilbert)\n\n# make a data frame to put the numbers in\ndf <- tibble(n = 1:1023) %>%\n  mutate(m1 = morton::fromMorton(n)[[1]],\n         m2 = -morton::fromMorton(n)[[2]])\n\n# the hilbert functions are hard to use with mutate, so \n# just use base R to make these\ndf$h1 <- hilbert::position(df$n, n = 10)[, 1] + 33 # an offset\ndf$h2 <- -hilbert::position(df$n, n = 10)[, 2]\n```\n:::\n\n\nThat's it&mdash;why didn't I think of this earlier?  And `ggplot::geom_path()` provides an easy way to plot the 'curves'.\n\n\n::: {.cell hash='fig4-01-hierarchical-indexing_cache/html/unnamed-chunk-3_f494ac2b99432e5b6b7682bd7d9de458'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\n\nggplot(df) + \n  geom_path(aes(x = m1, y = m2), linewidth = 0.25) + \n  geom_path(aes(x = h1, y = h2), linewidth = 0.25) + \n  coord_equal() + \n  theme_void()\n```\n\n::: {.cell-output-display}\n![](fig4-01-hierarchical-indexing_files/figure-html/unnamed-chunk-3-1.png){width=960}\n:::\n:::\n\n\n## H3 hexagons\nIf you like hexagons, you'll love the [`h3forr` package](https://github.com/crazycapivara/h3forr), which provides a spatial data friendly API for the H3 indexing scheme. There is an official H3 API for _R_ but it focuses on the indexes and makes it harder work to fill spaces with hexagons, unlike the [h3forr::polyfill()](https://github.com/crazycapivara/h3forr) function.\n\nAnyway, here goes:\n\n\n::: {.cell hash='fig4-01-hierarchical-indexing_cache/html/unnamed-chunk-4_51fe978638c1e0cd584d8c833ef07eb5'}\n\n```{.r .cell-code}\nlibrary(h3forr)\nlibrary(tmap)\nlibrary(sf)\nlibrary(maptiles)\n```\n:::\n\n\nMake a 20km square near Wellington, Aotearoa.\n\n\n::: {.cell hash='fig4-01-hierarchical-indexing_cache/html/unnamed-chunk-5_3337c1ae5935884e369ea022bbd4ee9c'}\n\n```{.r .cell-code}\nsquare <- c(1.735e6 + 2e4 * c(0, 0, 1, 1, 0), \n            5.425e6 + 2e4 * c(0, 1, 1, 0, 0)) %>%\n  matrix(ncol = 2) %>%\n  list() %>%\n  st_polygon() %>%\n  st_sfc() %>%\n  st_sf(crs = 2193) %>%\n  st_transform(4326) # polyfill needs lat-lon\n```\n:::\n\n\nA convenience function to wrap `hsforr::polyfill()` so that we retrieve all hexes within a buffered area of the supplied data.\n\n\n::: {.cell hash='fig4-01-hierarchical-indexing_cache/html/unnamed-chunk-6_15a0685f1616016d7d3f2b5093afdb64'}\n\n```{.r .cell-code}\nget_hexes <- function(poly, resolution, distance) {\n  poly %>% \n    st_buffer(distance) %>%\n    polyfill(res = resolution) %>% \n    h3_to_geo_boundary() %>% \n    geo_boundary_to_sf()\n}\n```\n:::\n\n\nThen get some hexagons.\n\n\n::: {.cell hash='fig4-01-hierarchical-indexing_cache/html/unnamed-chunk-7_7b1a4f69bb36b5652ad37914967132bf'}\n\n```{.r .cell-code}\nh3_4 <- get_hexes(square, 4, 10000)\nh3_5 <- get_hexes(square, 5, 5000)\nh3_6 <- get_hexes(square, 6, 2500)\nh3_7 <- get_hexes(square, 7, 1500)\nh3_8 <- get_hexes(square, 8, 1000)\nh3_9 <- get_hexes(square, 9, 750)\n```\n:::\n\n\nAnd make a map. I'm using `maptiles::get_tiles()` to provide a base map.\n\n\n::: {.cell hash='fig4-01-hierarchical-indexing_cache/html/unnamed-chunk-8_691fe2becf1d912f46685fb949fade4f'}\n\n```{.r .cell-code}\nbasemap <- get_tiles(square, zoom = 11, provider = \"CartoDB.Positron\")\n\ntm_shape(basemap, bbox = square) + tm_rgb() +\n  tm_shape(h3_4) + tm_borders(lwd = 5) +\n  tm_shape(h3_5) + tm_borders(lwd = 3) +\n  tm_shape(h3_6) + tm_borders(lwd = 2) +\n  tm_shape(h3_7) + tm_borders(lwd = 1) +\n  tm_shape(h3_8) + tm_borders(lwd = 0.5) +\n  tm_shape(h3_9) + tm_borders(lwd = 0.35) +\n  tm_credits(get_credit(\"CartoDB.Positron\"), bg.color = \"white\",\n             position = c(\"RIGHT\", \"BOTTOM\"), bg.alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](fig4-01-hierarchical-indexing_files/figure-html/unnamed-chunk-8-1.png){width=768}\n:::\n:::\n\n::: {.cell hash='fig4-01-hierarchical-indexing_cache/html/unnamed-chunk-9_2deb8afbf4a8a4594e948006f654aff0'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}