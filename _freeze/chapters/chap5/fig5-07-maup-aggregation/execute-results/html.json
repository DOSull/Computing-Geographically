{
  "hash": "0e83bfebdd729fc5a18e0bf6017daaab",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Figure 5.7 The MAUP aggregation effect\"\nlightbox: true\ncategories: \n  - figures\n  - code\n  - R\nexecute: \n  cache: true\n  freeze: auto\nknitr:\n  opts_chunk: \n    warning: false\n    message: false\n---\n\n\nThis page produces a coloured version of Figure 5.7 which may be a little easier to read. It also uses standard deviation ellipses to make things a bit clearer (I hope).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(MASS)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(colorspace)\n```\n:::\n\n\n## Data\n### Make a correlated dataset\nUsing the `MASS::mvrnorm()` function we can create a dataframe with `x` and `y` variables with some requested correlation. We also reorder by the sum of the two variables (in effect from lower-left to upper-right), and number the observations on that basis. This allows us to aggregate observations that are broadly similar or broadly different.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nget_correlated_df <- function(cor = 0.5) {\n  # generate a multivariate normal distribution\n  # mu is the mean centre, Sigma is the covariance matrix\n  mvrnorm(n = 1024, mu = c(5, 5), \n          Sigma = matrix(c(1, cor, cor, 1), 2, 2)) %>%\n    as.data.frame() %>%\n    rename(x = V1, y = V2) %>%\n    arrange(x + y) %>% \n    mutate(id = row_number())\n}\n```\n:::\n\n\n### Aggregator functions\nNext two functions that aggregate either similar or different observations. This is a fairly crude approach but it works. `agg_similar()` uses integer division to create a 'grouper' variable that goes eight 0s, then eight 1s, then eight 2s, and so on up to eight 127s. When `group_by` is applied using this variable, sets of 8 similar observations are aggregated and the mean taken to give a new dataset.\n\nConversely, if the grouper variable is based on the remainder from division by 128, we get 8 sequences of 0, 1, 2, 3,... 127, and when these are aggregated into groups, each will consist of eight observations at widely separated positions in the sequence (i.e., with very different values).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# aggregate similar observations\nagg_similar <- function(df) {\n  df %>%\n    mutate(grouper = id %/% 8) %>%\n    group_by(grouper) %>%\n    summarise(x = mean(x), \n              y = mean(y)) %>%\n    dplyr::select(-grouper) %>%\n    ungroup()\n}\n\n# aggregate different observations\nagg_different <- function(df) {\n  df %>%\n    mutate(grouper = id %% 128) %>%\n    group_by(grouper) %>%\n    summarise(x = mean(x), \n              y = mean(y)) %>%\n    dplyr::select(-grouper) %>%\n    ungroup()\n}\n```\n:::\n\n\n## Plotting functions\nWe also make some plotting functions so we don't have to repeat a lot of code. These add three plots based on a dataset. A scatterplot of the points, a standard deviation ellipse, and a best fit line. This will make sense when you see the plots.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nadd_ellipses <- function(g, dfs, cols, alphas, filled_polygons) {\n  for (i in seq_along(dfs)) {\n    if (filled_polygons[i]) {\n      g <- g + stat_ellipse(\n                 data = dfs[[i]], aes(x = x, y = y), geom = \"polygon\", \n                 alpha = alphas[i], fill = cols[i])\n    } else {\n      g <- g + stat_ellipse(\n                 data = dfs[[i]], aes(x = x, y = y), colour = cols[i], \n                 linewidth = 0.35)\n    }\n  }\n  g\n}\n\nadd_points <- function(g, dfs, cols, alphas) {\n  for (i in seq_along(dfs)) {\n    g <- g + geom_point(data = dfs[[i]], aes(x = x, y = y), \n               colour = cols[i], alpha = alphas[i], pch = 16, size = 1)\n  }\n  g\n}\n\nadd_lines <- function(g, dfs, cols) {\n  for (i in seq_along(dfs)) {\n    g <- g + geom_smooth(data = dfs[[i]], aes(x = x, y = y), method = lm,\n               se = FALSE, colour = darken(cols[i]), linewidth = 0.75)\n  }\n  g\n}\n\nthree_plots <- function(dfs, cols = c(\"black\", \"forestgreen\", \"magenta\")) {\n  g <- ggplot()\n  g <- add_ellipses(g, dfs, cols, alpha = rep(0.25, 3), filled_polygons = c(F, T, T))\n  g <- add_points(g, dfs, cols, alphas = c(0.2, 0.5, 0.5))\n  g <- add_lines(g, dfs, cols)\n  g + \n    coord_equal() + \n    theme_void()\n}\n```\n:::\n\n\n## Finally the plots\nSo now make some datsets and see what we get.\n\nFirst a dataset with approximate correlation between `x` and `y` of 0.5. We then aggregate it two ways and plot the results.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- get_correlated_df(0.5)\ndf_sim <- df %>%\n  agg_similar()\ndf_diff <- df %>%\n  agg_different()\n\nthree_plots(list(df, df_sim, df_diff))\n```\n\n::: {.cell-output-display}\n![](fig5-07-maup-aggregation_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n\nWhen we aggregate similar observations (the green ellipse) the correlation is increased, while aggregating different observations inverts the correlation (the violet ellipse)! The initial correlation is seen in the unfilled black ellipse.\n\nThe effect is even more remarkable for uncorrelated data:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- get_correlated_df(0)\ndf_sim <- df %>%\n  agg_similar()\ndf_diff <- df %>%\n  agg_different()\n\nthree_plots(list(df, df_sim, df_diff))\n```\n\n::: {.cell-output-display}\n![](fig5-07-maup-aggregation_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\nWhat do we take from this in a geographical setting? Well, if indeed \"near things are more related than distant things\", then in many situations where data are aggregated spatially based on proximity positive correlations are likely to be 'enhanced', and we may even see correlations where none exist at the individual level.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}