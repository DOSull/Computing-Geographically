{
  "hash": "6db71df587c855408eb036211fe052d8",
  "result": {
    "markdown": "---\ntitle: \"Figure 5.6 Simple illustration of the modifiable areal unit problem\"\ncategories: \n  - figures\n  - code\n  - R\nexecute: \n  cache: true\n  freeze: auto\nknitr:\n  opts_chunk: \n    warning: false\n    message: false\n---\n\n\nI've remade this one in colour, because I think it's a bit easier to see this way.\n\nSome libraries:\n\n\n::: {.cell hash='fig5-06-simple-maup_cache/html/unnamed-chunk-1_91a850f8e69614d772d19627d2194c8a'}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\nlibrary(tmap)\nlibrary(MASS)\n```\n:::\n\n\nWe need to make a grid of values, with a clear gradient in one direction. The code for making geometries in _R_ is ugly, so I've hidden it.\n\n\n::: {.cell hash='fig5-06-simple-maup_cache/html/unnamed-chunk-2_6a14afe446e3f6214ea97754e0d9066c'}\n\n```{.r .cell-code  code-fold=\"true\"}\nmake_square <- function(x = 0, y = 0, d = 1) {\n  xs <- x + c(-1, 1, 1, -1) * d / 2\n  ys <- y + c(-1, -1, 1, 1) * d / 2\n  xs <- c(xs, xs[1])\n  ys <- c(ys, ys[1])\n  st_polygon(list(matrix(c(xs, ys), ncol = 2)))\n}\n\ngrid <- expand.grid(1:10, 1:10)\n\npolys <- list()\nfor (r in 1:nrow(grid)) {\n  polys <- c(polys, make_square(x = grid[r, 1], y = grid[r, 2]))\n}\n\npoly_sf <- polys %>% \n  lapply(list) %>%\n  lapply(st_polygon) %>%\n  st_sfc() %>%\n  st_sf(x = grid[, 1], y = grid[, 2])\nn <- dim(poly_sf)[1]\npoly_sf$val <- poly_sf$x + runif(n, -0.5, 0.5)\n```\n:::\n\n\nAnyway... we have a 10 by 10 grid of squares with values that increase from left to right:\n\n\n::: {.cell hash='fig5-06-simple-maup_cache/html/unnamed-chunk-3_6bdf4239efd65a882702efc424ad569e'}\n\n```{.r .cell-code}\nbrks <- .5 + (0:100) / 10\n\ntm_shape(poly_sf) +\n  tm_polygons(col = \"val\", palette = \"Spectral\", breaks = brks, lwd = 0.5) +\n  tm_layout(frame = FALSE, legend.show = FALSE)\n```\n\n::: {.cell-output-display}\n![](fig5-06-simple-maup_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nNow we aggregate into columns and rows, taking the mean value of our variable in each case.\n\n\n::: {.cell hash='fig5-06-simple-maup_cache/html/unnamed-chunk-4_0381a950a6364e7a2d7d4c6cb3ff54a2'}\n\n```{.r .cell-code}\ncolumn_sf <- poly_sf %>%\n  group_by(x) %>%\n  summarise(val = mean(val)) \n\nrows_sf <- poly_sf %>%\n  group_by(y) %>%\n  summarise(val = mean(val))\n```\n:::\n\n\nAnd now we can make maps of the results. The column-wise aggregation emphasizes the gradient, while the row-wise aggregation erases it completely, since every row has a similar set of values ranging from low to high, and when these are combined each row ends up pretty much the same.\n\n\n::: {.cell hash='fig5-06-simple-maup_cache/html/unnamed-chunk-5_92feab95bcee75cb1d350a79d22cd445'}\n\n```{.r .cell-code}\nm1 <- tm_shape(column_sf) +\n  tm_polygons(col = \"val\", palette = \"Spectral\", breaks = brks, lwd = 0.5) +\n  tm_layout(frame = FALSE, legend.show = FALSE)\n\nm2 <- tm_shape(rows_sf) +\n  tm_polygons(col = \"val\", palette = \"Spectral\", breaks = brks, lwd = 0.5) +\n  tm_layout(frame = FALSE, legend.show = FALSE)\n\ntmap_arrange(list(m1, m2), nrow = 1)\n```\n\n::: {.cell-output-display}\n![](fig5-06-simple-maup_files/figure-html/unnamed-chunk-5-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='fig5-06-simple-maup_cache/html/unnamed-chunk-6_5a6934a6ecb43cfffb7fe845850e3cd3'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}