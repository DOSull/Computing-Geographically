{
  "hash": "48ae08e9d6f73949daaafb2ab73bd17d",
  "result": {
    "markdown": "---\ntitle: \"Figure 5.1: The 9-intersection model of topological relations\"\ncategories: \n  - figures\n  - code\n  - extras\nexecute: \n  cache: true\n  freeze: auto\n---\n\n\nThis page attempts to show the various [spatial predicates of the 9-intersection model](https://en.wikipedia.org/wiki/DE-9IM#Spatial_predicates) presented in Figure 5.1 in code.\n\nFirst we make some shapes, and map them.\n\n\n::: {.cell hash='fig5-01-9-intersection_cache/html/unnamed-chunk-1_7212d4da1df1db4444ba7b4caccc7bcd'}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\nlibrary(tmap)\nlibrary(stringr)\n\np1 <- st_point(c(-2e4, 0)) %>% st_buffer(1e4, nQuadSegs = 90)\np2 <- p1\np3 <- p1 + c(2e4, 0)\np4 <- p3 * matrix(c(0.5, 0, 0, 0.5), 2, 2)\np5 <- p4 + c(0, -5e3)\np6 <- st_difference(p3, p4) + c(2.1e4, 0)\np7 <- p4 * matrix(c(1.5, 0, 0, 1.5), 2, 2) + c(2e4, -1e3)\n\npolys <- st_sfc(list(p1, p2, p3, p4, p5, p6, p7)) %>% \n  st_sf() %>%\n  mutate(geometry = geometry + c(1.745e6, 5.425e6)) %>%\n  st_set_crs(2193) %>%\n  mutate(ID = 1:7, \n         dx = c(0, 0, .5, 0, 0, 0, 0), \n         dy = c(-1, 1, 2, 0, 0, 0, 0))\n```\n:::\n\n\nMap and label these for reference.\n\n\n::: {.cell hash='fig5-01-9-intersection_cache/html/unnamed-chunk-2_5a8aa6c65a5cfacf0991d467d43f42fb'}\n\n```{.r .cell-code}\nlines <- polys %>% st_cast(\"MULTILINESTRING\") # for placing text labels\n\ntm_shape(polys) + \n  tm_fill(col = \"ID\", alpha = 0.5, style = \"cat\", \n          palette = c(\"red\", \"dodgerblue3\", \"darkgreen\", \n                      \"black\", \"yellow\", \"violet\", \"brown\"),\n          legend.is.portrait = FALSE) +\n  tm_shape(lines) +\n  tm_text(text = \"ID\", xmod = \"dx\", ymod = \"dy\") +\n  tm_layout(\n    frame = FALSE, legend.outside = TRUE,\n    legend.outside.position = \"bottom\", \n    legend.position = c(0.5, 0.5), \n    legend.just = c(0.5, 0.5))\n```\n\n::: {.cell-output-display}\n![](fig5-01-9-intersection_files/figure-html/unnamed-chunk-2-1.png){width=768}\n:::\n:::\n\n\nNow we can run various tests against the spatial predicates in turn. For example `st_disjoint` tells us the following. \n\n\n::: {.cell hash='fig5-01-9-intersection_cache/html/unnamed-chunk-3_711840730f4cc33cad3216c582338069'}\n\n```{.r .cell-code}\npolys %>% st_disjoint()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nSparse geometry binary predicate list of length 7, where the predicate\nwas `disjoint'\n 1: 4, 5, 6, 7\n 2: 4, 5, 6, 7\n 3: 6, 7\n 4: 1, 2, 6, 7\n 5: 1, 2, 6, 7\n 6: 1, 2, 3, 4, 5\n 7: 1, 2, 3, 4, 5\n```\n:::\n:::\n\n\nWe can tabulate the result of applying all the spatial predicates to these polygons into a table. \n\nThe details of how this is done don't matter greatly, but if you are interested click into the code below. The core of it is based on the various `st_*` functions such as `st_intersects` or `st_contains`. These correspond, more or less to the relations identified in Figure 5.1. The spatial predicates available in the `sf` package in _R_ correspond to those implemented in spatial databases such as [PostGIS](https://postgis.net/).\n\n\n::: {.cell hash='fig5-01-9-intersection_cache/html/unnamed-chunk-4_9e781aa15fe77d27410dab25912d6d74'}\n\n```{.r .cell-code  code-fold=\"true\"}\nget_spatial_query_as_vector <- function(data, predicate) {\n  data %>% \n    predicate() %>%\n    lapply(str_c, collapse = \" \") %>%\n    unlist()\n}\n\nde9im <- data.frame(\n  ID = polys$ID,\n  disjoint          = get_spatial_query_as_vector(polys, st_disjoint),\n  touches           = get_spatial_query_as_vector(polys, st_touches),\n  equals            = get_spatial_query_as_vector(polys, st_equals),\n  intersects        = get_spatial_query_as_vector(polys, st_intersects),\n  contains_properly = get_spatial_query_as_vector(polys, st_contains_properly),\n  contains          = get_spatial_query_as_vector(polys, st_contains),\n  within            = get_spatial_query_as_vector(polys, st_within),\n  covers            = get_spatial_query_as_vector(polys, st_covers),\n  covered_by        = get_spatial_query_as_vector(polys, st_covered_by)\n)\n\nknitr::kable(de9im)\n```\n\n::: {.cell-output-display}\n| ID|disjoint  |touches |equals |intersects |contains_properly |contains |within |covers |covered_by |\n|--:|:---------|:-------|:------|:----------|:-----------------|:--------|:------|:------|:----------|\n|  1|4 5 6 7   |3       |1 2    |1 2 3      |                  |1 2      |1 2    |1 2    |1 2        |\n|  2|4 5 6 7   |3       |1 2    |1 2 3      |                  |1 2      |1 2    |1 2    |1 2        |\n|  3|6 7       |1 2     |3      |1 2 3 4 5  |4                 |3 4 5    |3      |3 4 5  |3          |\n|  4|1 2 6 7   |        |4      |3 4 5      |                  |4        |3 4    |4      |3 4        |\n|  5|1 2 6 7   |        |5      |3 4 5      |                  |5        |3 5    |5      |3 5        |\n|  6|1 2 3 4 5 |        |6      |6 7        |                  |6        |6      |6      |6          |\n|  7|1 2 3 4 5 |        |7      |6 7        |                  |7        |7      |7      |7          |\n:::\n:::\n\n::: {.cell hash='fig5-01-9-intersection_cache/html/unnamed-chunk-5_d319bf821a01e0e5542139c70052d976'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}