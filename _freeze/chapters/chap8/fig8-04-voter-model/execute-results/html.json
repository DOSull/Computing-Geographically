{
  "hash": "ceb1d5209b9b3646a25ca2aeaeba537a",
  "result": {
    "markdown": "---\ntitle: \"Figure 8.4: A voter model CA\"\ncategories: \n  - figures\n  - code\n  - R\nexecute: \n  cache: true\n  freeze: auto\nknitr:\n  opts_chunk: \n    warning: false\n    message: false\n---\n\n\nThe example in the book was made using a NetLogo model based on [this model from _Spatial Simulation_](https://dosull.github.io/pattern-and-process/chapter-3/3.8.html), but this page provides _R_ code instead.\n\n\n::: {.cell hash='fig8-04-voter-model_cache/html/unnamed-chunk-1_4d05fc3cf99a9bd9ea256609f0533868'}\n\n```{.r .cell-code}\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(pracma)\nlibrary(data.table)\nlibrary(ggplot2)\n```\n:::\n\n\n## Model code\nThe model code is in the cell below. It returns a 3D array of cell states, with each 'layer' a new 2D array of cell states.\n\n\n::: {.cell hash='fig8-04-voter-model_cache/html/unnamed-chunk-2_27712f871997674209a5176d63a88f58'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# random neighbour offset\nrandom_offset <- function() {\n  c(1, 0, -1, 0, 0, 1, 0, -1)[0:1 + sample(c(1, 3, 5, 7), 1)]\n}\n\n# get a random cell in a matrix\nrandom_cell <- function(m) {\n  c(sample(seq_len(nrow(m)), 1), sample(seq_len(ncol(m)), 1))\n}\n\n# make nr * nc random local updates\ngeneration <- function(m) {\n  nr <- nrow(m)\n  nc <- ncol(m)\n  random_coords <- replicate(nc * nr, random_cell(m))\n  random_offsets <- replicate(nc * nr, random_offset())\n  for (i in 1:(nr * nc)) {\n    coords <- random_coords[, i]\n    offset <- random_offsets[, i]\n    nbr <- ((coords + offset - 1) %% c(nr, nc)) + 1\n    m[coords[1], coords[2]] <- m[nbr[1], nbr[2]]\n  }\n  return(m)\n}\n\n# return a wrapped version of matrix m\nwrap_matrix <- function(m, dx, dy) {\n  m2 <- pracma::repmat(m, 3, 3)\n  m2[seq_len(nrow(m)) + nrow(m) - dy, \n     seq_len(ncol(m)) + ncol(m) - dx]\n}\n\n# initialise random matrix\ninit_state <- function(s, nr, nc) {\n  matrix(sample(s, nr * nc, replace = TRUE),\n         ncol = nc, nrow = nr)\n}\n\nvoter_model <- function(states = 1:2, ncol = 20, nrow = 20, \n                        t_max = 20, seed = NULL) {\n  set.seed(seed)\n  result <- array(0, dim = c(nrow, ncol, t_max))\n  result[, , 1] <- init_state(states, nrow, ncol)\n  for (gen in 2:t_max) {\n    result[, , gen] <- generation(result[, , gen - 1])\n  }\n  result\n}\n```\n:::\n\n\n## Run the model\nWe run the model and convert it into a  dataframe to make it easier to plot.\n\n\n::: {.cell hash='fig8-04-voter-model_cache/html/unnamed-chunk-3_3c8da42d815bf1dba30d00f4b4e2ebb2'}\n\n```{.r .cell-code}\nnum_states <- 3\nwidth <- 40\nheight <- 40\ntime_steps <- 100\n\nvma_df <- voter_model(1:num_states, ncol = width, nrow = height, \n                      t_max = time_steps) %>%\n  as.data.table() %>%\n  as_tibble() %>%\n  rename(x = V1, y = V2, t = V3, num = value) %>%\n  mutate(state = as.factor(num))\n```\n:::\n\n\n## Plotting\nThe dataframe has attributes `x`, `y`, `t`, and `state`, which are most easily plotted as a sequence of model snapshots using `ggplot2::facet_wrap`.\n\n\n::: {.cell hash='fig8-04-voter-model_cache/html/unnamed-chunk-4_0daf3781c453bfef5464a39dc3d6a279'}\n\n```{.r .cell-code}\nggplot(vma_df %>% filter(t %in% 2:21)) + \n  geom_raster(aes(x = x, y = y, fill = state), show.legend = FALSE) + \n  scale_fill_brewer(palette = \"Accent\") +\n  coord_equal() +\n  facet_wrap( ~ t, ncol = 5) +\n  theme_void() + \n  theme(strip.background = element_blank(),\n        strip.text.x = element_blank())\n```\n\n::: {.cell-output-display}\n![](fig8-04-voter-model_files/figure-html/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n### An animation\nWe can also make a movie...\n\n\n::: {.cell hash='fig8-04-voter-model_cache/html/unnamed-chunk-5_5ec9dc1ecf4f8f34ef5345a5c17a2e16'}\n\n```{.r .cell-code}\nlibrary(gganimate)\n\nanim <- ggplot(vma_df) + \n  geom_raster(aes(x = x, y = y, fill = state), show.legend = FALSE) + \n  scale_fill_brewer(palette = \"Accent\") +\n  coord_equal() +\n  transition_manual(t) + \n  labs(title = \"Step: {frame}\") +\n  theme_void()\n        \nanimate(anim, nframes = 100, fps = 4)\n```\n\n::: {.cell-output-display}\n![](fig8-04-voter-model_files/figure-html/unnamed-chunk-5-1.gif)\n:::\n:::\n\n::: {.cell hash='fig8-04-voter-model_cache/html/unnamed-chunk-6_b8dc8ea93ac043a760fcf60fccccd0f0'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}