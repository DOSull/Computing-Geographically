{
  "hash": "7e0dfd832a4133086d75d950b23a0d9f",
  "result": {
    "markdown": "---\ntitle: \"Figure 2.8: Voronoi polygons associated with lines and polygons\"\nimage: \"voronoi-map-1.png\"\nexecute: \n  cache: true\n  freeze: auto\n---\n\n\nThis figure was mostly prepared in QGIS, but an _R_ version is provided here to show the steps involved. \n\nDifferences between thae versions are due to the original being prepared across a wider extent which was then clipped down to the final extent. The input data used here are already clipped to the final extent meaning there are anomalies near the edges.\n\n\n::: {.cell hash='fig2-08-non-point-voronoi_cache/html/unnamed-chunk-1_6e12e2f7d70af97f7b021b406a16c2f7'}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\nlibrary(tmap)\n```\n:::\n\n\n## Load data\nYou'll need your own roads and buildings data. Mine came from OpenStreetMap via the [QGIS QuickOSM plugin](https://plugins.qgis.org/plugins/QuickOSM/).\n\n\n::: {.cell hash='fig2-08-non-point-voronoi_cache/html/unnamed-chunk-2_6160ae83f770c8fff23e61dafb2a4589'}\n\n```{.r .cell-code}\nroads <- st_read(\"final-roads.gpkg\") %>%\n  select(full_id, osm_id)\nbldgs <- st_read(\"final-buildings.gpkg\") %>%\n  select(full_id, osm_id)\n```\n:::\n\n\nAnd a quick map to see what we're working with.\n\n\n::: {.cell hash='fig2-08-non-point-voronoi_cache/html/unnamed-chunk-3_44b26ac35a2512d499bb7346f75cbcd5'}\n\n```{.r .cell-code}\ntm_shape(bldgs) + \n  tm_fill() + \n  tm_shape(roads) + \n  tm_lines()\n```\n\n::: {.cell-output-display}\n![](fig2-08-non-point-voronoi_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n## Interpolate points along the lines and polygon boundaries\nPlace points along the boundaries of each of these.\n\nFor the roads we combine all elements into a single line object and assign the same `id` to every point generated.\n\n\n::: {.cell hash='fig2-08-non-point-voronoi_cache/html/unnamed-chunk-4_0afebf2f1726679e4195cb8efcf3726d'}\n\n```{.r .cell-code}\nr_pts <- roads %>%\n  st_union() %>%\n  st_cast(\"LINESTRING\") %>%\n  st_line_sample(density = 1) %>%\n  st_cast(\"POINT\") %>%\n  st_as_sf() %>%\n  rename(geometry = x) %>%\n  mutate(id = \"0\")\n```\n:::\n\n\nFor the buildings we wish to retain the building IDs, so we do a join based on the nearest feature in the buildings dataset.\n\n\n::: {.cell hash='fig2-08-non-point-voronoi_cache/html/unnamed-chunk-5_6c8aa750807865014b7daf2c7ddd6b7b'}\n\n```{.r .cell-code}\nb_pts <- bldgs %>%\n  st_cast(\"MULTILINESTRING\") %>%\n  st_cast(\"LINESTRING\") %>%\n  # if any perimeter is < 1 then the sampling step fails\n  filter(st_length(.) >= units::as_units(1, \"m\")) %>%\n  st_line_sample(density = 1) %>%\n  st_cast(\"POINT\") %>%\n  st_as_sf() %>%\n  rename(geometry = x) %>%\n  st_join(bldgs, join = st_nearest_feature) %>%\n  mutate(id = full_id) %>%\n  select(id)\n```\n:::\n\n\n## Make the point Voronoi polygons\nNow combine the two into a single point dataset.\n\n\n::: {.cell hash='fig2-08-non-point-voronoi_cache/html/unnamed-chunk-6_93328f865a2369b1da5501fa61458bb9'}\n\n```{.r .cell-code}\nall_pts <- bind_rows(r_pts, b_pts)\n```\n:::\n\n\nNow make a Voronoi layer from the points.\n\n\n::: {.cell hash='fig2-08-non-point-voronoi_cache/html/unnamed-chunk-7_d32f06176381a41586b1f3f43d469dbb'}\n\n```{.r .cell-code}\npts_vor <- all_pts %>%\n  st_union() %>%\n  st_voronoi()%>%\n  st_cast() %>%\n  st_as_sf() %>%\n  st_join(all_pts, left = FALSE) \n```\n:::\n\n\nWe need to clip this to the extent of the buildings data.\n\n\n::: {.cell hash='fig2-08-non-point-voronoi_cache/html/unnamed-chunk-8_f0685bc877b617d9c8a5946efbf04eb9'}\n\n```{.r .cell-code}\nextent <- bldgs %>%\n  st_bbox() %>%\n  st_as_sfc() %>%\n  st_sf()\n\npts_vor <- pts_vor %>%\n  st_intersection(extent)\n\nplot(pts_vor, main = \"Voronoi of all points\", key.pos = NULL)\n```\n\n::: {.cell-output-display}\n![](fig2-08-non-point-voronoi_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## Finally form the line and polygon Voronois\nNow we dissolve (`group_by`) on the `id` attribute.\n\n\n::: {.cell hash='fig2-08-non-point-voronoi_cache/html/unnamed-chunk-9_ae2b398804b9b9c2bef797c3b59632de'}\n\n```{.r .cell-code}\ndiss_vor <- pts_vor %>%\n  group_by(id) %>%\n  summarise()\n\nplot(diss_vor, main = \"Dissolved Voronois\", key.pos = NULL)\n```\n\n::: {.cell-output-display}\n![](fig2-08-non-point-voronoi_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## Make a map\nFinally, we can make a map, similar to the one in Figure 2.8 in the book.\n\n\n::: {.cell hash='fig2-08-non-point-voronoi_cache/html/unnamed-chunk-10_7f2bed82e1c9a35fcba6352992ec1a0c'}\n\n```{.r .cell-code}\ntm_shape(bldgs, bbox = extent) +\n  tm_fill() + \n  # make the road into a polygon for clipping to extent\n  tm_shape(roads %>% st_buffer(2) %>% st_intersection(extent)) + \n  tm_fill(col = \"#c08080\") +\n  # filter points so only those inside the extent are in the map\n  tm_shape(all_pts %>% st_filter(extent %>% st_buffer(-.1))) + \n  tm_dots(col = \"black\") +\n  tm_shape(pts_vor) + \n  tm_borders(col = \"lightgray\", lwd = 0.75) + \n  tm_shape(diss_vor) + \n  tm_borders(col = \"black\")\n```\n\n::: {.cell-output-display}\n![](fig2-08-non-point-voronoi_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='fig2-08-non-point-voronoi_cache/html/unnamed-chunk-11_3da357aa356a3601627763c6cc9b3963'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}