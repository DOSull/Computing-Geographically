{
  "hash": "973ee42932db2b7f74c3521f87c9b7c0",
  "result": {
    "markdown": "---\ntitle: \"Figures 2.2 and 2.3 and more on cartograms\"\ncategories: \n  - code\n  - R\n  - extra\nexecute: \n  cache: true\n  freeze: auto\nknitr:\n  opts_chunk: \n    warning: false\n    message: false\n---\n\n\nThe cartograms in Figure 2.2 were made using *ScapeToad* (linked [here](links-2.qmd#footnote-6)). They are examples of Gastner-Newman cartograms, popularised by [Danny Dorling](http://dannydorling.org/) at the [World Mapper website](https://worldmapper.org/). I'm not really in love with this style of cartogram, although I do appreciate the impact they've had in making the notion of _cartograms_ more widely known. Furthermore, there aren't many other cartogram styles that have been automated even to the limited extent that this one has.\n\nThe broader point, made several times in the book is the arbitrary nature of the preference for geodetic accuracy in map projections.It would be preferable if standard geospatial platforms could support *any* mapping of geocentric (latitude-longitude) coordinates to other two dimensional coordinate systems, as defined by end-users.\n\nIn fact, the machinery to do so exists in most GIS in the tools used to georeference imagery. However, these tools typically only enable warping inputs so that they conform with already known coordinate reference systems, although the underlying mathematics of mapping points between two coordinate systems could in principle allow user-defined coordinates, with potential benefits for the exploration of multiple geographies.\n\nAn example of this is shown below, again an Aotearoa New Zealand population cartogram.\n\n![](nz-cartogram.png)\n\nHowever, this example however, was produced in an unusual way. I first used _ScapeToad_ to make a population-based cartogram, but at the same time transformed a set of hex-grid points. This gives me a set of mappings of coordinate pairs in a geodetic coordinate space (in this case New Zealand Transverse Mercator NZTM), and the corresponding coordinate locations in 'population cartogram space'. Using these it is possible to interpolate any points in NZTM coordinates into the cartogram coordinate space. The mapping is the same information that is provided by _ScapeToad_'s transformation grid (pictured in Figure 2.3 in the book), but with more detail.\n\n## Making a cartogram the complicated (but reusable) way\nHere's some _R_ code that does all this in a very rough and ready way using a triangulation-based interpolator from the `akima` package. I say more at the end of the page about [embedding this approach in GIS](#embedding-this-in-gis).\n\nFirst we read in a New Zealand coastline polygon, which we are going to transform, hex grid centres in NZTM, and the same hex grid centres transformed by _ScapeToad_ based on a population cartogram. \n\n\n::: {.cell hash='fig2-02-cartograms_cache/html/unnamed-chunk-1_96c97baf3fe982619b0ce6efc25ec80d'}\n\n```{.r .cell-code}\nlibrary(sf)\nlibrary(dplyr)\nlibrary(tmap)\nlibrary(akima)\nlibrary(knitr)\n\nnz <- st_read(\"nz.gpkg\")\nhex_pts <- st_read(\"hex-centres.gpkg\")\nhex_pts_carto <- st_read(\"hex-centres-carto.gpkg\") %>%\n  st_set_crs(st_crs(hex_pts))\n```\n:::\n\n\nAnd here is a map of the three layers.\n\n\n::: {.cell hash='fig2-02-cartograms_cache/html/unnamed-chunk-2_a77bc8cabdd4c3f4707de43a8c6b4fe0'}\n\n```{.r .cell-code  code-fold=\"true\"}\ntm_shape(hex_pts) + \n  tm_dots(size = 0.0005) +\n  tm_shape(hex_pts_carto) +\n  tm_dots(col = \"red\", size = 0.0005) +\n  tm_shape(nz) +\n  tm_borders(col = \"blue\") +\n  tm_layout(frame = FALSE)\n```\n\n::: {.cell-output-display}\n![](fig2-02-cartograms_files/figure-html/unnamed-chunk-2-1.png){width=480}\n:::\n:::\n\n\nThe black dots are the hex grid centres in NZTM, and the red dots are where they ended up when transformed according to the population cartogram.\n\n## Build a transformation table\nNext we build a 'transformation' table with the $(x_1, y_1)$ and $(x_2, y_2)$ pairs of corresponding coordinate pairs in the NZTM and population cartogram spaces.\n\n\n::: {.cell hash='fig2-02-cartograms_cache/html/unnamed-chunk-3_2edd967c802b3dcdea4d38ff3029851e'}\n\n```{.r .cell-code}\nx1y1 <- hex_pts %>%\n  st_coordinates() %>%\n  as_tibble() %>%\n  select(1:2) %>% \n  rename(x1 = X, y1 = Y)\n\nx2y2 <- hex_pts_carto %>%\n  st_coordinates() %>%\n  as_tibble() %>%\n  select(1:2) %>% \n  rename(x2 = X, y2 = Y)\n\ntransform <- bind_cols(x1y1, x2y2)\n```\n:::\n\n\nHere is what that looks like:\n\n\n::: {.cell hash='fig2-02-cartograms_cache/html/unnamed-chunk-4_221df9804107c1d2234d2e9008fe2bb9'}\n\n```{.r .cell-code  code-fold=\"true\"}\nkable(head(transform), format = \"html\")\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table>\n <thead>\n  <tr>\n   <th style=\"text-align:right;\"> x1 </th>\n   <th style=\"text-align:right;\"> y1 </th>\n   <th style=\"text-align:right;\"> x2 </th>\n   <th style=\"text-align:right;\"> y2 </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:right;\"> 1084975 </td>\n   <td style=\"text-align:right;\"> 4896329 </td>\n   <td style=\"text-align:right;\"> 1145278 </td>\n   <td style=\"text-align:right;\"> 4920257 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1084975 </td>\n   <td style=\"text-align:right;\"> 4913650 </td>\n   <td style=\"text-align:right;\"> 1148380 </td>\n   <td style=\"text-align:right;\"> 4929528 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1089975 </td>\n   <td style=\"text-align:right;\"> 4887669 </td>\n   <td style=\"text-align:right;\"> 1150074 </td>\n   <td style=\"text-align:right;\"> 4918234 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1089975 </td>\n   <td style=\"text-align:right;\"> 4904989 </td>\n   <td style=\"text-align:right;\"> 1156816 </td>\n   <td style=\"text-align:right;\"> 4927015 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1089975 </td>\n   <td style=\"text-align:right;\"> 4922310 </td>\n   <td style=\"text-align:right;\"> 1157860 </td>\n   <td style=\"text-align:right;\"> 4934749 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:right;\"> 1094975 </td>\n   <td style=\"text-align:right;\"> 4879009 </td>\n   <td style=\"text-align:right;\"> 1151653 </td>\n   <td style=\"text-align:right;\"> 4914431 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### The points to be transformed\nThe simple interpolator we are using can only transform points, so we convert the coastline data to points.\n\n\n::: {.cell hash='fig2-02-cartograms_cache/html/unnamed-chunk-5_91faefd6f68de5b651ceac41af752774'}\n\n```{.r .cell-code}\nnz_coast_pts <- nz %>%\n  st_cast(\"MULTIPOINT\") %>%\n  st_coordinates() %>%\n  as_tibble() %>%\n  select(1:2) %>%\n  rename(x = X, y = Y)\n```\n:::\n\n\n## The interpolation\nEach coordinate (i.e. $x$ and $y$) is separately interpolated. The interpolator is provided with the $(x, y, z)$ information from the `transform` dataframe which for the $x$ coordinate are $(x_1, y_1, x_2)$ and for the $y$ coordinate $(x_1, y_1, y_2)$. What is done with these data is that the input $(x_1, y_1)$ coordinates are triangulated giving in effect a [_triangulated irregular network_](https://en.wikipedia.org/wiki/Triangulated_irregular_network) surface for each coordinate in the transformed population cartogram space. Any point inside a triangle can have its coordinate in the transformed space interpolated from the known coordinate values at the vertices of the triangle.\n\nAnyway, using `akima::interpp` here is how we can do that.\n\n\n::: {.cell hash='fig2-02-cartograms_cache/html/unnamed-chunk-6_f5c77e0d206d2d30e0e9a799f74a6c7d'}\n\n```{.r .cell-code}\nnz_coast_carto_x <- interpp(x = transform$x1, y = transform$y1, z = transform$x2, \n                            xo = nz_coast_pts$x, yo = nz_coast_pts$y)$z\nnz_coast_carto_y <- interpp(x = transform$x1, y = transform$y1, z = transform$y2, \n                            xo = nz_coast_pts$x, yo = nz_coast_pts$y)$z\n```\n:::\n\n\nThen we make these up into a spatial dataframe, and map them. The original coast outline is in blue, the transformed coast points in red. \n\n\n::: {.cell hash='fig2-02-cartograms_cache/html/unnamed-chunk-7_fa6bf917380e7a25af53aaf4a16dce6c'}\n\n```{.r .cell-code}\nnz_coast_carto <- data.frame(x = nz_coast_carto_x, \n                             y = nz_coast_carto_y) %>%\n  st_as_sf(coords = c(\"x\", \"y\"), crs = 2193)\n\ntm_shape(nz) + \n  tm_borders(col = \"blue\", lwd = 0.35) +\n  tm_shape(nz_coast_carto) +\n  tm_dots(col = \"red\", size = 0.005) +\n  tm_layout(frame = FALSE)\n```\n\n::: {.cell-output-display}\n![](fig2-02-cartograms_files/figure-html/unnamed-chunk-7-1.png){width=480}\n:::\n:::\n\n\n## Embedding this in GIS\nClearly the above example is not entirely satisfactory. It can only transform points and a lot of additional code would be required to add that capability. _In principle_ however, it is not difficult to include this capability in GIS or other standard platforms, using capabilities already present in the `proj` tools for coordinate transformation that underpin today's geospatial software. This is something [Luke Bergmann](https://geog.ubc.ca/profile/luke-bergmann/) and I have been exploring for a while, see:\n\n> Bergmann LR and D O’Sullivan. 2017. [Computing with many spaces: Generalizing projections for the digital geohumanities and GIScience](https://dx.doi.org/10.1145/3149858.3149866). In *Proceedings of the 1st ACM SIGSPATIAL Workshop on Geospatial Humanities*, 31–38. ACM Press.\n\nSpecifically `proj`'s [`tinshift` transformation](https://proj.org/en/9.3/operations/transformations/tinshift.html) provides for _exactly_ the transformation carried out above. It requires a JSON file with the triangulation information precomputed. That's how I made the example at the top of this page. With 'tinshift' JSON file, the following GDAL command line will carry out the required transformation between NZTM and a population cartogram based on 2018 census data:\n\n    ogr2ogr -skipfailures -ct \"+proj=pipeline +step +proj=axisswap +order=2,1 +step +proj=tinshift +file=tinshift.json +step +proj=axisswap +order=2,1\" <output GPKG> <input GPKG>\n\nUnfortunately, for reasons we don't fully understand the additional `axisswap` transformation is required, either side of the `tinshift` operation requiring a projection 'pipeline' to be used. The `-skipfailures` option prevents the program failing if a polygon becomes invalid as a result of the transformation.\n\nHere's [a JSON file](nz-cartogram.json) for the New Zealand population cartogram, if you want to try it for yourself.\n\nThis might not be the most elegant way to project any geospatial data into a cartogram space, but it is already available in existing tools!\n\n\n::: {.cell hash='fig2-02-cartograms_cache/html/unnamed-chunk-8_faf4fc0f22ef0e1019f20fa3fb34fc27'}\n\n```{.r .cell-code  code-fold=\"true\"}\n# License (MIT)\n#\n# Copyright (c) 2023 David O'Sullivan\n#\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation\n# files (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to  permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included\n# in all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n# OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\n# DEALINGS IN THE SOFTWARE.\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}